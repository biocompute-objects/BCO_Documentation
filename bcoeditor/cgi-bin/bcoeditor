#!/usr/bin/python
import os,sys
import string
import cgi
import commands
from optparse import OptionParser
import traceback
from json_tricks import dump, dumps, load, loads, strip_comments
import json
import re
import time
import datetime
import auth
import util
import bcrypt

import pymongo
from pymongo import MongoClient


__version__="1.0"


def register_user(mongo_cl_users, user_obj):

    user_obj["status"] = 0
    try:
        user_obj["password"] = bcrypt.hashpw(user_obj["password"].encode('utf-8'), bcrypt.gensalt())
        if mongo_cl_users.find({"email":user_obj["email"]}).count() != 0:
            out_json = {"taskstatus":0, "errormsg":"The email submitted is already registered!"}
        else:
            res = mongo_cl_users.insert_one(user_obj)
            out_json = {"taskstatus":1}
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")
        
    return out_json


def save_object(in_json):

    email = "xx"
    out_json = {}
    try:
        bco_id = int(in_json["bco_id"])
        if bco_id != -1:
            in_json.pop("bco_id")
            in_json["provenance_domain"]["modified"] = datetime.datetime.now().strftime("%b %d, %Y %H:%M:%S")
            result = mongo_cl_bco.update_one({"bco_id":bco_id}, {'$set': in_json}, upsert=False)
            out_json = {"taskstatus": 1, "bcoid":bco_id}
        else:
            bco_id = util.get_next_sequence_value("bcoid")
            in_json["bco_id"] = bco_id
            in_json["provenance_domain"]["created"] = datetime.datetime.now().strftime("%b %d, %Y %H:%M:%S")
            in_json["provenance_domain"]["contributors"] = [
                {
                    "name": "", 
                    "affiliation": "", 
                    "email": email,
                    "orcid": "", 
                    "contribution": ["createdBy"]
                }
            ]
            result = mongo_cl_bco.insert_one(in_json)
            out_json = {"bcoid":bco_id, "taskstatus":1}
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")

    return out_json



def search_objects(in_json):


    try:
        query_obj = {}
        if in_json["queryvalue"] != "":
            if in_json["queryfield"] == "bco_id":
                query_obj = {"bco_id":int(in_json["queryvalue"])}
            if in_json["queryfield"] == "name":
                query_obj = {"provenance_domain":{"name":in_json["queryvalue"]}}

        row = []
        obj_list = []
        obj_list.append(config_json["tableheaders"]["searchresults"]["labellist"])
        obj_list.append(config_json["tableheaders"]["searchresults"]["typelist"])

        for doc in mongo_cl_bco.find(query_obj):
            doc.pop("_id")
            created_by = doc["provenance_domain"]["contributors"][0]["email"]
            bco_id = str(doc["bco_id"])
            linked_id = '<a id=view_'+bco_id+' class=viewlink href="#">' 
            linked_id += bco_id + '</a>'
            row = [
                linked_id
                ,doc["provenance_domain"]["name"]
                ,doc["provenance_domain"]["created"]
                ,doc["provenance_domain"]["contributors"][0]["email"]
            ]
            obj_list.append(row)
        
        taskstatus = 1
        out_json = {}
        out_json["searchresults"] = obj_list
        out_json["taskstatus"] = taskstatus
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")


        
    return out_json


def get_object_view_json(in_json):
 
    try:
        out_json = mongo_cl_bco.find_one({"bco_id":in_json["bcoid"]})
        if out_json == None:
            out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
        else:
            out_json.pop("_id")
            if "none" in out_json:
                out_json.pop("none")
        ordr_dict = json.loads(open("conf/field_order.json").read())
        out_json = util.order_json_obj(out_json,ordr_dict)
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")

    return out_json



def get_object_edit_json(in_json):


    try:
        bco_json = {}
        if in_json["bcoid"] != -1:
            bco_json = mongo_cl_bco.find_one({"bco_id":in_json["bcoid"]})
            if bco_json == None:
                out_json = {"taskstatus":0, "errormsg":"Object does not exist!"}
            else:
                if "_id" in bco_json:
                    bco_json.pop("_id")
        else:
            bco_json = {
                "bco_id":-1,
                "bco_spec_version":"",
                "digital_signature":"",
                "created":"",
                "modified":"",
                "provenance_domain":{},
                "usability_domain":[],
                "error_domain":{}
            }
            
        created_by = "xxx"
        if in_json["bcoid"] != -1:
            created_by = bco_json["provenance_domain"]["contributors"][0]["email"]
        
        domain_list  = [
            "provenance_domain", 
            "usability_domain", 
            "execution_domain", 
            "description_domain",
            "parametric_domain",
            "io_domain",
            "error_domain"
        ]

        mainschema_file = config_json["pathinfo"]["htmlpath"] + "/js/biocomputeobject.json"
        out_json = loads(open(mainschema_file, "r").read(), preserve_order=True)

        for domain in domain_list:
            ref_obj = {"$ref":config_json["rootinfo"]["htmlroot"] + "/js/" + domain + ".json"}
            out_json["schema"]["properties"][domain] = ref_obj

        for subdomain in ["scm_extension"]:
            ref_obj = {"$ref":config_json["rootinfo"]["htmlroot"] + "/js/" + subdomain + ".json"}
            out_json["schema"]["properties"]["extension_domain"]["properties"][subdomain] = ref_obj
    
        for subdomain in ["fhir_extension"]:
            ref_obj = {"$ref":config_json["rootinfo"]["htmlroot"] + "/js/" + subdomain + ".json"}
            out_json["schema"]["properties"]["extension_domain"]["properties"][subdomain]["items"] = ref_obj                     
        out_json["startval"]= {
            "bco_id":bco_json["bco_id"],
            "bco_spec_version":bco_json["bco_spec_version"],
            "digital_signature": bco_json["digital_signature"],
        }
        for domain in domain_list:
            out_json["startval"][domain] = bco_json[domain] if domain in bco_json else {}

        ordr_dict = json.loads(open("conf/field_order.json").read())
        out_json["startval"] = util.order_json_obj(out_json["startval"],ordr_dict) 
        out_json["readonly"] = 0
        out_json["taskstatus"] = 1
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")



    return out_json



#~~~~~~~~~~~~~~~~~~~~~
def main():

    usage = "\n%prog  [options]"
    parser = OptionParser(usage,version="%prog " + __version__)
    msg = "Input JSON text"
    parser.add_option("-j","--injson",action="store",dest="injson",help=msg)


    form_dict = cgi.FieldStorage()
    (options,args) = parser.parse_args()

    
    in_json = {}
    if len(form_dict.keys()) > 0:
        in_json = json.loads(form_dict["injson"].value) if "injson" in form_dict else {}
    else:
        for key in ([options.injson]):
            if not (key):
                parser.print_help()
                sys.exit(0)
        in_json = json.loads(options.injson)


    global config_json
    global mongo_db
    global mongo_cl_bco
    global mongo_cl_counters
    global log_dir


    try:

        config_json = json.loads(open("conf/config.json", "r").read())
        client = MongoClient('mongodb://localhost:27017')
        log_dir = config_json["pathinfo"]["htmlpath"] + "/log/"

        mongo_db = client[config_json["dbinfo"]["mongodbname"]]
        mongo_cl_bco = mongo_db[config_json["dbinfo"]["mongoclname_bco"]]
        mongo_cl_counters = mongo_db[config_json["dbinfo"]["mongoclname_counters"]]
        mongo_cl_users = mongo_db[config_json["dbinfo"]["mongoclname_users"]]

        svc = in_json["svc"] if "svc" in in_json else ""
        auth_json = auth.authenticate(log_dir)
        if svc == "login_user":
            out_json = {}
            auth_json = auth.login(mongo_cl_users, in_json, config_json["dbinfo"]["sessionlife"],log_dir)
        elif svc == "register_user":
            out_json = register_user(mongo_cl_users, in_json)
        elif svc == "search_objects":
            out_json = search_objects(in_json)
        elif svc == "get_object_view_json":
            out_json = get_object_view_json(in_json)
        elif svc == "get_object_edit_json":
            out_json = get_object_edit_json(in_json)
        elif svc == "save_object":
            out_json = save_object(in_json["bco"])
        else:
            out_json = {"taskstatus":0, "errormsg":"Submitted service does not exist!"}
        out_json["auth"] = auth_json
    except Exception, e:
        out_json = util.log_error(traceback.format_exc(), config_json["pathinfo"]["htmlpath"] + "/log/")


    print "Content-Type: application/json"
    print          
    print json.dumps(out_json, indent=4)



if __name__ == '__main__':
    main()



